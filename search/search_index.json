{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>This is the documentation for Python contained within the repository. </p>"},{"location":"Code/SUMMARY/","title":"Code","text":"<ul> <li>components<ul> <li>corona_dsm</li> <li>geolocated</li> <li>introduction</li> <li>keypoint_fm</li> <li>nro_data</li> <li>plane_crashes</li> <li>references</li> </ul> </li> <li>notebooks<ul> <li>nro<ul> <li>1_fetch_nro</li> </ul> </li> </ul> </li> <li>pages<ul> <li>corona_dsm</li> <li>feature_matching</li> <li>home</li> <li>not_found_404</li> <li>nro_docs</li> </ul> </li> <li>utils</li> </ul>"},{"location":"Code/components/corona_dsm/","title":"Components","text":""},{"location":"Code/components/geolocated/","title":"Geolocated","text":""},{"location":"Code/components/introduction/","title":"Introduction","text":""},{"location":"Code/components/keypoint_fm/","title":"Keypoint fm","text":""},{"location":"Code/components/nro_data/","title":"Nro data","text":""},{"location":"Code/components/plane_crashes/","title":"Plane crashes","text":""},{"location":"Code/components/references/","title":"References","text":""},{"location":"Code/notebooks/nro/1_fetch_nro/","title":"Nro","text":""},{"location":"Code/pages/corona_dsm/","title":"Pages","text":""},{"location":"Code/pages/feature_matching/","title":"Feature matching","text":""},{"location":"Code/pages/home/","title":"Home","text":""},{"location":"Code/pages/not_found_404/","title":"Not found 404","text":""},{"location":"Code/pages/nro_docs/","title":"Nro docs","text":""},{"location":"Code/utils/","title":"Utils","text":""},{"location":"Code/utils/#utils.create_fh_logger","title":"<code>create_fh_logger(file)</code>","text":"<p>Creates a standardized file handling logger, primarily for use within the notebooks for long-running analytics. It saves the log to the specified file.</p> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>Union[Path, str]</code> <p>The location to save logs</p> required <p>Returns:</p> Type Description <code>Logger</code> <p>logging.Logger: A configured logger ready for use</p> Source code in <code>src/utils/__init__.py</code> <pre><code>def create_fh_logger(file: Union[Path, str]) -&gt; logging.Logger:\n    \"\"\"Creates a standardized file handling logger, primarily for use within the notebooks for long-running analytics. It saves the log to the specified file.\n\n    Args:\n        file (Union[Path, str]): The location to save logs\n\n    Returns:\n        logging.Logger: A configured logger ready for use\n    \"\"\"\n    logger = logging.getLogger()\n    logger.setLevel(logging.INFO)\n    formatter = logging.Formatter(\"%(asctime)s | %(levelname)s | %(message)s\")\n    file_handler = logging.FileHandler(file)\n    file_handler.setLevel(logging.DEBUG)\n    file_handler.setFormatter(formatter)\n    logger.addHandler(file_handler)\n    return logger\n</code></pre>"},{"location":"Code/utils/#utils.file_to_md","title":"<code>file_to_md(file)</code>","text":"<p>Helper function to convert a .py or .ipynb file into Markdown, compatible with Dash. Empty cells, output, and markdown are removed from <code>.ipynb</code> files.</p> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>Union[Path, str]</code> <p>The <code>.py</code> or <code>.ipynb</code> file</p> required <p>Returns:</p> Name Type Description <code>Markdown</code> <code>Markdown</code> <p>Markdown displaying the contents of the file</p> Source code in <code>src/utils/__init__.py</code> <pre><code>def file_to_md(file: Union[Path, str]) -&gt; Markdown:\n    \"\"\"Helper function to convert a .py or .ipynb file into Markdown, compatible with Dash. Empty cells, output, and markdown are removed from `.ipynb` files.\n\n    Args:\n        file (Union[Path, str]): The `.py` or `.ipynb` file\n\n    Returns:\n        Markdown: Markdown displaying the contents of the file\n    \"\"\"\n    if str(file[-2:]) == \"py\":\n        with open(file, \"r\") as f:\n            data = f.read()\n        return Markdown(f\"```python\\n{data}```\\n\")\n    else:\n        mk = MarkdownExporter()\n        mk.exclude_output = False  # remove output\n        mk.exclude_markdown = False  # remove notebook content -&gt; this is intended to be provided in paragraphs before the code\n        regx = RegexRemovePreprocessor()\n        regx.patterns = [\"[\\S]*\\Z\"]  # HIDE EMPTY CELLS\n        mk.register_preprocessor(regx, enabled=True)  # THE DEFAULT IS FALSE.\n        return Markdown(mk.from_filename(filename=file)[0])\n</code></pre>"},{"location":"Code/utils/#utils.update_code_button","title":"<code>update_code_button(n_clicks, is_open)</code>","text":"<p>This function reverses the button text and state of a collapsed Notebook. If it's closed with</p> <p>Parameters:</p> Name Type Description Default <code>n_clicks</code> <code>int</code> <p>Current value of n_clicks associated with a Button</p> required <code>is_open</code> <code>bool</code> <p>Current value of is_open associated with a Collapse</p> required <p>Returns:</p> Type Description <code>Tuple[bool, str]</code> <p>Tuple[bool, str]: A new value to provide is_open for a Collapse, a new value to provide to the Button text</p> Source code in <code>src/utils/__init__.py</code> <pre><code>def update_code_button(n_clicks: int, is_open: bool) -&gt; Tuple[bool, str]:\n    \"\"\"This function reverses the button text and state of a collapsed Notebook. If it's closed with\n\n    Args:\n        n_clicks (int): Current value of n_clicks associated with a Button\n        is_open (bool): Current value of is_open associated with a Collapse\n\n    Returns:\n        Tuple[bool, str]: A new value to provide is_open for a Collapse, a new value to provide to the Button text\n    \"\"\"\n    is_open = not is_open if n_clicks else is_open\n    text = \"Hide Notebook\" if is_open else \"Show Notebook\"\n    return is_open, text\n</code></pre>"}]}